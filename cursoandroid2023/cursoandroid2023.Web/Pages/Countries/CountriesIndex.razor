@page "/countries"
@inject IRepository Repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService


<h3>Países</h3>

<a class="btn btn-primary" href="/countries/create">Nuevo País</a>

@if (Countries is null)
{
    <p>Cargando...</p>
}else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>País</th>
                <th>Nacionalidad</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var country in Countries!)
            {
                <tr>
                    <td>
                        @country.Name
                    </td>
                    <td>
                        @country.Nationality
                    </td>
                    <td>
                        <a class="btn btn-warning" href="/countries/edit/@country.Id">Editar</a>
                        <button class="btn btn-danger" @onclick=@(() => Delete(country.Id))>Borrar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHttp = await Repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }
    

    private async Task Delete(int id)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"

        });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await Repository.Delete($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await Load();

    }
}
